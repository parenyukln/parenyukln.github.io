{"version":3,"sources":["logo.svg","WebBluetooth/WebBluetooth.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","WebBluetooth","connectToDevice","navigator","bluetooth","requestDevice","acceptAllDevices","optionalServices","then","device","console","log","gatt","connect","server","getPrimaryService","service","getCharacteristic","characteristic","readValue","value","getUint8","catch","error","onClick","this","className","width","height","viewBox","xmlns","x","y","fill","Component","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,qMC8C5BC,G,kNA3CXC,gBAAkB,WACdC,UAAUC,UAAUC,cAAc,CAC9BC,kBAAkB,EAClBC,iBAAkB,CAAC,qBAEtBC,MAAK,SAAAC,GAEF,OADAC,QAAQC,IAAIF,GACLA,EAAOG,KAAKC,aAEtBL,MAAK,SAAAM,GAEF,OAAOA,EAAOC,kBAAkB,sBAEnCP,MAAK,SAAAQ,GAEF,OAAOA,EAAQC,kBAAkB,oBAEpCT,MAAK,SAAAU,GAEF,OAAOA,EAAeC,eAEzBX,MAAK,SAAAY,GACFV,QAAQC,IAAI,yBAA2BS,EAAMC,SAAS,OAEzDC,OAAM,SAAAC,GAAWb,QAAQC,IAAIY,O,uDAI9B,OACI,6BACI,4BAAQC,QAASC,KAAKvB,gBAAiBwB,UAAW,0BAC9C,yBAAKA,UAAU,YAAf,UAEI,yBAAKC,MAAM,MAAMC,OAAO,KAAKC,QAAQ,aAAaC,MAAM,8BACpD,0BAAMC,EAAE,IAAIC,EAAE,IAAIC,KAAK,OAAON,MAAM,MAAMC,OAAO,e,GAnClDM,cC4BZC,E,4MAxBXjC,gBAAkB,WACdC,UAAUC,UAAUC,cAAc,CAC9BC,kBAAkB,EAClBC,iBAAkB,CAAC,qBAEtBC,MAAK,SAAAC,GAAaC,QAAQC,IAAIF,MAC9Ba,OAAM,SAAAC,GAAWb,QAAQC,IAAIY,O,uDAI9B,OACI,yBAAKG,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKU,IAAKC,IAAMX,UAAU,WAAWY,IAAI,SACzC,+CACiB,2CAEjB,kBAAC,EAAD,Y,GAlBFJ,aCOEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB7C,WACrBA,UAAU8C,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEd9B,OAAM,SAAAC,GACLb,QAAQa,MAAMA,EAAM8B,c","file":"static/js/main.833754e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nclass WebBluetooth extends Component {\n    connectToDevice = () => {\n        navigator.bluetooth.requestDevice({\n            acceptAllDevices: true,\n            optionalServices: ['battery_service']\n        })\n        .then(device => {  \n            console.log(device)\n            return device.gatt.connect();\n        })\n        .then(server => {\n            // Getting Battery Service...\n            return server.getPrimaryService('battery_service');\n        })\n        .then(service => {\n            // Getting Battery Level Characteristic...\n            return service.getCharacteristic('battery_level');\n        })\n        .then(characteristic => {\n            // Reading Battery Level...\n            return characteristic.readValue();\n        })\n        .then(value => {\n            console.log('Battery percentage is ' + value.getUint8(0));\n        })\n        .catch(error => { console.log(error); });\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.connectToDevice} className={'bluetooth__connect-btn'} >\n                    <div className=\"basicBox\">\n                        Connect\n                        <svg width=\"130\" height=\"65\" viewBox=\"0 0 130 65\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <rect x='0' y='0' fill='none' width='130' height='65'/>\n                        </svg>\n                    </div>\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default WebBluetooth;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport WebBluetooth from './WebBluetooth/WebBluetooth';\n\nclass App extends Component {\n    connectToDevice = () => {\n        navigator.bluetooth.requestDevice({\n            acceptAllDevices: true,\n            optionalServices: ['battery_service']\n        })\n        .then(device => {  console.log(device); })\n        .catch(error => { console.log(error); });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <p>\n                    App for test BLE <u>Web connect</u>\n                    </p>\n                    <WebBluetooth />\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}